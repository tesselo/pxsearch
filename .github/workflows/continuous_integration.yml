name: Continuous Integration for PxSearch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  static_checks:
    name: Static checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      - name: Install Python 3
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install dependencies
        run: pip install flake8 black isort
      - name: Lint with Flake8
        run: flake8 .
      - name: Lint with isort
        run: isort --check --diff .
      - name: Lint with black
        run: black --check --diff .

  test:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:latest
        env:
          POSTGRES_DB: pxsearch
          POSTGRES_PASSWORD: postgres_password
          POSTGRES_USER: postgres_user
        ports:
          - 5432/tcp
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: snok/install-poetry@v1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run pytest tests --alembic-folder=alembic
        env:
          POSTGRES_HOST: localhost
          POSTGRES_DBNAME: pxsearch
          POSTGRES_USER: postgres_user
          POSTGRES_PASS: postgres_password
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

  deploy-production:
    name: Deploy to Production
    needs: [static_checks, test]
    runs-on: ubuntu-latest
    if: contains('refs/heads/main', github.ref)
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
      - run: npm install -g serverless
      - run: npm install
      - run: serverless deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKAGE_VERSION: ${{ github.sha }}
      - name: Build Batch
        run: |
          pip install awscli
          python setup.py sdist --formats=zip
          aws s3api put-object --bucket tesselo-pixels-scripts --key pxsearch-${PACKAGE_VERSION}.zip --body dist/pxsearch-${PACKAGE_VERSION}.zip
          docker build -t 595064993071.dkr.ecr.eu-central-1.amazonaws.com/tesselo-pxsearch:production .
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 595064993071.dkr.ecr.eu-central-1.amazonaws.com
          docker push 595064993071.dkr.ecr.eu-central-1.amazonaws.com/tesselo-pxsearch:production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKAGE_VERSION: ${{ github.sha }}
      - name: Sentry Release
        uses: tesselo/release-action@main
        with:
          sentry_project: pxsearch
          sentry_environment: 'production'
          sentry_release: ${{ github.sha }}
          code_dir: '.'
        env:
          SENTRY_ORG: 'tesselo'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
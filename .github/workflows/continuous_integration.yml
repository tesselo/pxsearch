name: Continuous Integration for PxSearch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      sure:
        description: 'Are you sure to deploy this thing to production?'
        required: true
        default: 'Not really'

jobs:
  static_checks:
    name: Static checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Install Python 3
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Python dependencies
        run: pip install black flake8
      - name: Run black and flake
        uses: wearerequired/lint-action@v1
        with:
          black: true
          flake8: true

  python_dependencies:
    name: Python dependencies
    runs-on: ubuntu-latest
    steps:
     - name: Checkout pxsearch
       uses: actions/checkout@v2
       with:
         path: ./pxsearch
     - name: Attempt to use cache
       uses: actions/cache@v2
       id: cache
       with:
         path: ./pxsearch-venv
         key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt') }}
     - name: Install Python 3
       uses: actions/setup-python@v1
       with:
         python-version: 3.8
     - name: Create virtualenv and install deps
       if: steps.cache.outputs.cache-hit != 'true'
       run: |
         python -m pip install --upgrade pip virtualenv
         virtualenv -p /usr/bin/python3 ./pxsearch-venv
         source ./pxsearch-venv/bin/activate
         pip install setuptools==57.5.0
         pip install -r ./pxsearch/requirements.txt

  python_dev_dependencies:
    name: Python dev dependencies
    runs-on: ubuntu-latest
    steps:
     - name: Checkout pxsearch
       uses: actions/checkout@v2
       with:
         path: ./pxsearch
     - name: Attempt to use cache
       uses: actions/cache@v2
       id: dev-cache
       with:
         path: ./pxsearch-dev-venv
         key: ${{ runner.os }}-pip-dev-${{ hashFiles('**/*requirements.txt') }}
     - name: Install Python 3
       uses: actions/setup-python@v1
       with:
         python-version: 3.8
     - name: Create virtualenv and install deps
       if: steps.cache.outputs.cache-hit != 'true'
       run: |
         python -m pip install --upgrade pip virtualenv
         virtualenv -p /usr/bin/python3 ./pxsearch-dev-venv
         source ./pxsearch-dev-venv/bin/activate
         pip install setuptools==57.5.0
         pip install -r ./pxsearch/requirements.txt
         pip install -r ./pxsearch/dev_requirements.txt

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: [ python_dev_dependencies ]
    services:
      postgres:
        image: postgis/postgis:latest
        env:
          POSTGRES_DB: pxsearch
          POSTGRES_PASSWORD: postgres_password
          POSTGRES_USER: postgres_user
        ports:
          - 5432/tcp
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout pxsearch
        uses: actions/checkout@v2
        with:
          path: ./pxsearch
      - name: Attempt to use cache
        uses: actions/cache@v2
        id: dev-cache
        with:
          path: ./pxsearch-dev-venv
          key: ${{ runner.os }}-pip-dev-${{ hashFiles('**/*requirements.txt') }}
      - name: Test
        run: |
          source ./pxsearch-dev-venv/bin/activate
          cd pxsearch && python -m pytest tests --alembic-folder=alembic
        env:
          POSTGRES_HOST: localhost
          POSTGRES_DBNAME: pxsearch
          POSTGRES_USER: postgres_user
          POSTGRES_PASS: postgres_password
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

  deploy-staging:
    name: Deploy to Staging
    needs: [python_dependencies, static_checks, test]
    runs-on: ubuntu-latest
    if: contains('refs/heads/main', github.ref)
    steps:
      - name: Checkout pxsearch
        uses: actions/checkout@v2
        with:
          path: ./pxsearch
      - name: Attempt to use cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ./pxsearch-venv
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt') }}
      - name: Deploy
        run: |
          source ./pxsearch-venv/bin/activate
          cd ./pxsearch
          zappa update staging --disable_progress
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKAGE_VERSION: ${{ github.sha }}
      - name: Build Batch
        run: |
          pip install awscli
          cd pxsearch && python setup.py sdist --formats=zip && cd ..
          aws s3api put-object --bucket tesselo-pixels-scripts --key pxsearch-${PACKAGE_VERSION}.zip --body pxsearch/dist/pxsearch-${PACKAGE_VERSION}.zip
          docker build -t 595064993071.dkr.ecr.eu-central-1.amazonaws.com/tesselo-pxsearch:staging pxsearch
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 595064993071.dkr.ecr.eu-central-1.amazonaws.com
          docker push 595064993071.dkr.ecr.eu-central-1.amazonaws.com/tesselo-pxsearch:staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKAGE_VERSION: ${{ github.sha }}
      - name: Sentry Release
        uses: tesselo/release-action@main
        with:
          sentry_project: pxsearch
          sentry_environment: 'staging'
          sentry_release: ${{ github.sha }}
          code_dir: 'pxsearch'
        env:
          SENTRY_ORG: 'tesselo'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

  deploy-production:
    name: Deploy to Production
    needs: [python_dependencies, static_checks, test]
    runs-on: ubuntu-latest
    if: contains('yes', github.event.inputs.sure) && contains('workflow_dispatch', github.event_name)
    steps:
      - name: Checkout pxsearch
        uses: actions/checkout@v2
        with:
          path: ./pxsearch
      - name: Attempt to use cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ./pxsearch-venv
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt') }}
      - name: Deploy
        run: |
          source ./pxsearch-venv/bin/activate
          cd ./pxsearch
          zappa update production --disable_progress
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKAGE_VERSION: ${{ github.sha }}
      - name: Build Batch
        run: |
          pip install awscli
          cd pxsearch && python setup.py sdist --formats=zip && cd ..
          aws s3api put-object --bucket tesselo-pixels-scripts --key pxsearch-${PACKAGE_VERSION}.zip --body pxsearch/dist/pxsearch-${PACKAGE_VERSION}.zip
          docker build -t 595064993071.dkr.ecr.eu-central-1.amazonaws.com/tesselo-pxsearch:production pxsearch
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 595064993071.dkr.ecr.eu-central-1.amazonaws.com
          docker push 595064993071.dkr.ecr.eu-central-1.amazonaws.com/tesselo-pxsearch:production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PACKAGE_VERSION: ${{ github.sha }}
      - name: Sentry Release
        uses: tesselo/release-action@main
        with:
          sentry_project: pxsearch
          sentry_environment: 'production'
          sentry_release: ${{ github.sha }}
          code_dir: 'pxsearch'
        env:
          SENTRY_ORG: 'tesselo'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
